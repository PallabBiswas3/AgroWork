import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import {
  DISEASE_DATABASE,
  CROP_DISEASES,
  MINERAL_DEFICIENCY_SYMPTOMS,
  PREDICTION_WEIGHTS,
  STATE_DISEASE_PREVALENCE
} from '../data/diseaseDatabase';
import './DiseasePestDashboard.css';

const DiseasePredictor = () => {
  const navigate = useNavigate();

  const [formData, setFormData] = useState({
    // Basic Information
    crop: 'Rice',
    state: 'UP',
    growth_stage: 'vegetative',

    // Leaf Symptoms
    leaf_color: 'normal_green',
    leaf_spots: 'none',
    leaf_texture: 'normal',
    leaf_shape: 'normal',
    leaf_edges: 'normal',

    // Stem/Root Symptoms
    stem_condition: 'healthy',
    stem_color: 'normal_green',
    root_condition: 'healthy',
    root_color: 'white_cream',

    // Environmental Conditions
    temperature: 25,
    humidity: 70,
    rainfall: 'moderate',
    irrigation: 'adequate',

    // Mineral Status
    nitrogen_status: 'adequate',
    phosphorus_status: 'adequate',
    potassium_status: 'adequate',
    calcium_status: 'adequate',
    magnesium_status: 'adequate',
    iron_status: 'adequate',

    // Additional Information
    pest_presence: 'none',
    recent_weather: 'normal',
    field_drainage: 'good'
  });

  const [predictions, setPredictions] = useState([]);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [activeTab, setActiveTab] = useState('input');
  const [showDetails, setShowDetails] = useState({});

  // Handle input changes
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Calculate disease probability based on symptoms and conditions
  const calculateDiseaseProbability = (diseaseKey, diseaseData) => {
    let totalScore = 0;
    let maxPossibleScore = 100;

    // Leaf symptoms matching (35% weight)
    const leafScore = calculateSymptomScore(diseaseData.symptoms.leaf, 'leaf');
    totalScore += leafScore * PREDICTION_WEIGHTS.leaf_symptoms;

    // Stem symptoms matching (25% weight)
    const stemScore = calculateSymptomScore(diseaseData.symptoms.stem, 'stem');
    totalScore += stemScore * PREDICTION_WEIGHTS.stem_symptoms;

    // Root symptoms matching (15% weight)
    const rootScore = calculateSymptomScore(diseaseData.symptoms.root, 'root');
    totalScore += rootScore * PREDICTION_WEIGHTS.root_symptoms;

    // Mineral deficiency correlation (15% weight)
    const mineralScore = calculateMineralScore(diseaseData.mineral_deficiency);
    totalScore += mineralScore * PREDICTION_WEIGHTS.mineral_deficiency;

    // Environmental factors (10% weight)
    const envScore = calculateEnvironmentalScore(diseaseData.environmental_factors);
    totalScore += envScore * PREDICTION_WEIGHTS.environmental_factors;

    // State-specific prevalence bonus
    const stateBonus = STATE_DISEASE_PREVALENCE[formData.state]?.includes(diseaseKey) ? 10 : 0;
    totalScore += stateBonus;

    return Math.min(totalScore, 100);
  };

  // Calculate symptom matching score
  const calculateSymptomScore = (diseaseSymptoms, bodyPart) => {
    let score = 0;

    if (bodyPart === 'leaf') {
      // Leaf color matching
      if (formData.leaf_color !== 'normal_green') {
        if (diseaseSymptoms.some(symptom =>
          symptom.toLowerCase().includes('yellow') && formData.leaf_color.includes('yellow') ||
          symptom.toLowerCase().includes('brown') && formData.leaf_color.includes('brown') ||
          symptom.toLowerCase().includes('purple') && formData.leaf_color.includes('purple')
        )) {
          score += 30;
        }
      }

      // Leaf spots matching
      if (formData.leaf_spots !== 'none') {
        if (diseaseSymptoms.some(symptom =>
          symptom.toLowerCase().includes('spot') ||
          symptom.toLowerCase().includes('lesion') ||
          symptom.toLowerCase().includes('blight')
        )) {
          score += 40;
        }
      }

      // Leaf texture and shape
      if (formData.leaf_texture !== 'normal' || formData.leaf_shape !== 'normal') {
        if (diseaseSymptoms.some(symptom =>
          symptom.toLowerCase().includes('distort') ||
          symptom.toLowerCase().includes('curl') ||
          symptom.toLowerCase().includes('wilt')
        )) {
          score += 30;
        }
      }
    }

    if (bodyPart === 'stem') {
      if (formData.stem_condition !== 'healthy') {
        if (diseaseSymptoms.some(symptom =>
          symptom.toLowerCase().includes('lesion') ||
          symptom.toLowerCase().includes('rot') ||
          symptom.toLowerCase().includes('brown') ||
          symptom.toLowerCase().includes('black')
        )) {
          score += 50;
        }
      }
    }

    if (bodyPart === 'root') {
      if (formData.root_condition !== 'healthy') {
        if (diseaseSymptoms.some(symptom =>
          symptom.toLowerCase().includes('rot') ||
          symptom.toLowerCase().includes('brown') ||
          symptom.toLowerCase().includes('discolor')
        )) {
          score += 60;
        }
      }
    }

    return score;
  };

  // Calculate mineral deficiency correlation
  const calculateMineralScore = (mineralDeficiency) => {
    let score = 0;
    const deficiencies = [...(mineralDeficiency.primary || []), ...(mineralDeficiency.secondary || [])];

    deficiencies.forEach(deficiency => {
      const mineral = deficiency.toLowerCase().split(' ')[0];
      if (formData[`${mineral}_status`] === 'deficient' || formData[`${mineral}_status`] === 'excess') {
        score += deficiency.includes('deficiency') ? 40 : 20;
      }
    });

    return Math.min(score, 100);
  };

  // Calculate environmental factor score
  const calculateEnvironmentalScore = (envFactors) => {
    let score = 0;

    // Temperature matching
    if (envFactors.temperature) {
      const [minTemp, maxTemp] = envFactors.temperature;
      if (formData.temperature >= minTemp && formData.temperature <= maxTemp) {
        score += 40;
      }
    }

    // Humidity matching
    if (envFactors.humidity) {
      const [minHum, maxHum] = envFactors.humidity;
      if (formData.humidity >= minHum && formData.humidity <= maxHum) {
        score += 40;
      }
    }

    // Weather conditions
    if (envFactors.conditions) {
      envFactors.conditions.forEach(condition => {
        if (condition.toLowerCase().includes('high humidity') && formData.humidity > 80) score += 10;
        if (condition.toLowerCase().includes('waterlog') && formData.field_drainage === 'poor') score += 10;
        if (condition.toLowerCase().includes('cool') && formData.temperature < 20) score += 10;
        if (condition.toLowerCase().includes('warm') && formData.temperature > 25) score += 10;
      });
    }

    return Math.min(score, 100);
  };

  // Generate disease predictions
  const generatePredictions = () => {
    setIsAnalyzing(true);

    setTimeout(() => {
      const cropDiseases = CROP_DISEASES[formData.crop] || [];
      const predictions = [];

      cropDiseases.forEach(diseaseKey => {
        const diseaseData = DISEASE_DATABASE[diseaseKey];
        if (diseaseData) {
          const probability = calculateDiseaseProbability(diseaseKey, diseaseData);

          if (probability > 15) { // Only show diseases with >15% probability
            predictions.push({
              diseaseKey,
              diseaseData,
              probability,
              riskLevel: probability > 70 ? 'High' : probability > 40 ? 'Medium' : 'Low'
            });
          }
        }
      });

      // Sort by probability
      predictions.sort((a, b) => b.probability - a.probability);

      setPredictions(predictions.slice(0, 6)); // Show top 6 predictions
      setIsAnalyzing(false);
      setActiveTab('results');
    }, 2000);
  };

  // Toggle disease details
  const toggleDetails = (diseaseKey) => {
    setShowDetails(prev => ({
      ...prev,
      [diseaseKey]: !prev[diseaseKey]
    }));
  };

  // Handle form submission
  const handleSubmit = (e) => {
    e.preventDefault();
    generatePredictions();
  };

  // Reset form
  const resetForm = () => {
    setFormData({
      crop: 'Rice',
      state: 'UP',
      growth_stage: 'vegetative',
      leaf_color: 'normal_green',
      leaf_spots: 'none',
      leaf_texture: 'normal',
      leaf_shape: 'normal',
      leaf_edges: 'normal',
      stem_condition: 'healthy',
      stem_color: 'normal_green',
      root_condition: 'healthy',
      root_color: 'white_cream',
      temperature: 25,
      humidity: 70,
      rainfall: 'moderate',
      irrigation: 'adequate',
      nitrogen_status: 'adequate',
      phosphorus_status: 'adequate',
      potassium_status: 'adequate',
      calcium_status: 'adequate',
      magnesium_status: 'adequate',
      iron_status: 'adequate',
      pest_presence: 'none',
      recent_weather: 'normal',
      field_drainage: 'good'
    });
    setPredictions([]);
    setActiveTab('input');
  };

  return (
    <div className="disease-predictor">
      <div className="container">
        {/* Header */}
        <div className="page-header">
          <h1>ЁЯФм AI Disease Predictor</h1>
          <h2>рдмреАрдорд╛рд░реА рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди рдкреНрд░рдгрд╛рд▓реА</h2>
          <p>Advanced plant disease prediction system for Indian crops</p>
        </div>

        {/* Navigation Tabs */}
        <div className="tab-navigation">
          <button
            className={`tab-btn ${activeTab === 'input' ? 'active' : ''}`}
            onClick={() => setActiveTab('input')}
          >
            ЁЯУЛ Input Symptoms
          </button>
          <button
            className={`tab-btn ${activeTab === 'results' ? 'active' : ''}`}
            onClick={() => setActiveTab('results')}
            disabled={predictions.length === 0}
          >
            ЁЯОп Disease Predictions
          </button>
          <button
            className={`tab-btn ${activeTab === 'treatment' ? 'active' : ''}`}
            onClick={() => setActiveTab('treatment')}
            disabled={predictions.length === 0}
          >
            ЁЯТК Treatment Guide
          </button>
        </div>

        {/* Input Tab */}
        {activeTab === 'input' && (
          <div className="input-section">
            <form onSubmit={handleSubmit} className="disease-form">
              <div className="form-grid">

                {/* Basic Information */}
                <div className="form-section">
                  <h3>ЁЯУН Basic Information | рдмреБрдирд┐рдпрд╛рджреА рдЬрд╛рдирдХрд╛рд░реА</h3>
                  <div className="form-row">
                    <div className="form-group">
                      <label>Crop | рдлрд╕рд▓</label>
                      <select name="crop" value={formData.crop} onChange={handleInputChange}>
                        <option value="Rice">Rice (рдзрд╛рди)</option>
                        <option value="Wheat">Wheat (рдЧреЗрд╣реВрдВ)</option>
                        <option value="Cotton">Cotton (рдХрдкрд╛рд╕)</option>
                        <option value="Maize">Maize (рдордХреНрдХрд╛)</option>
                        <option value="Tomato">Tomato (рдЯрдорд╛рдЯрд░)</option>
                        <option value="Sugarcane">Sugarcane (рдЧрдиреНрдирд╛)</option>
                        <option value="Mustard">Mustard (рд╕рд░рд╕реЛрдВ)</option>
                        <option value="Tea">Tea (рдЪрд╛рдп)</option>
                      </select>
                    </div>
                    <div className="form-group">
                      <label>State | рд░рд╛рдЬреНрдп</label>
                      <select name="state" value={formData.state} onChange={handleInputChange}>
                        <option value="UP">Uttar Pradesh</option>
                        <option value="PB">Punjab</option>
                        <option value="MH">Maharashtra</option>
                        <option value="GJ">Gujarat</option>
                        <option value="RJ">Rajasthan</option>
                        <option value="WB">West Bengal</option>
                        <option value="AS">Assam</option>
                        <option value="KA">Karnataka</option>
                        <option value="AP">Andhra Pradesh</option>
                        <option value="TN">Tamil Nadu</option>
                        <option value="KL">Kerala</option>
                        <option value="OR">Odisha</option>
                        <option value="BR">Bihar</option>
                      </select>
                    </div>
                    <div className="form-group">
                      <label>Growth Stage | рд╡реГрджреНрдзрд┐ рдЕрд╡рд╕реНрдерд╛</label>
                      <select name="growth_stage" value={formData.growth_stage} onChange={handleInputChange}>
                        <option value="seedling">Seedling (рдЕрдВрдХреБрд░рдг)</option>
                        <option value="vegetative">Vegetative (рд╡рд╛рдирд╕реНрдкрддрд┐рдХ)</option>
                        <option value="flowering">Flowering (рдлреВрд▓)</option>
                        <option value="fruiting">Fruiting (рдлрд▓)</option>
                        <option value="maturity">Maturity (рдкрд░рд┐рдкрдХреНрд╡рддрд╛)</option>
                      </select>
                    </div>
                  </div>
                </div>

                {/* Leaf Symptoms */}
                <div className="form-section">
                  <h3>ЁЯНГ Leaf Symptoms | рдкрддреНрддреА рдХреЗ рд▓рдХреНрд╖рдг</h3>
                  <div className="form-row">
                    <div className="form-group">
                      <label>Leaf Color | рдкрддреНрддреА рдХрд╛ рд░рдВрдЧ</label>
                      <select name="leaf_color" value={formData.leaf_color} onChange={handleInputChange}>
                        <option value="normal_green">Normal Green (рд╕рд╛рдорд╛рдиреНрдп рд╣рд░рд╛)</option>
                        <option value="light_green">Light Green (рд╣рд▓реНрдХрд╛ рд╣рд░рд╛)</option>
                        <option value="dark_green">Dark Green (рдЧрд╣рд░рд╛ рд╣рд░рд╛)</option>
                        <option value="yellow_green">Yellowish Green (рдкреАрд▓рд╛ рд╣рд░рд╛)</option>
                        <option value="yellow">Yellow (рдкреАрд▓рд╛)</option>
                        <option value="brown_yellow">Brown-Yellow (рднреВрд░рд╛-рдкреАрд▓рд╛)</option>
                        <option value="brown">Brown (рднреВрд░рд╛)</option>
                        <option value="purple">Purple (рдмреИрдВрдЧрдиреА)</option>
                        <option value="red_brown">Reddish Brown (рд▓рд╛рд▓ рднреВрд░рд╛)</option>
                      </select>
                    </div>
                    <div className="form-group">
                      <label>Leaf Spots | рдкрддреНрддреА рдкрд░ рдзрдмреНрдмреЗ</label>
                      <select name="leaf_spots" value={formData.leaf_spots} onChange={handleInputChange}>
                        <option value="none">None (рдХреЛрдИ рдирд╣реАрдВ)</option>
                        <option value="small_brown">Small Brown Spots (рдЫреЛрдЯреЗ рднреВрд░реЗ рдзрдмреНрдмреЗ)</option>
                        <option value="large_brown">Large Brown Spots (рдмрдбрд╝реЗ рднреВрд░реЗ рдзрдмреНрдмреЗ)</option>
                        <option value="water_soaked">Water-soaked Lesions (рдкрд╛рдиреА рднрд░реЗ рдШрд╛рд╡)</option>
                        <option value="target_spots">Target Spots (рдирд┐рд╢рд╛рдирд╛ рдзрдмреНрдмреЗ)</option>
                        <option value="white_spots">White Spots (рд╕рдлреЗрдж рдзрдмреНрдмреЗ)</option>
                        <option value="black_spots">Black Spots (рдХрд╛рд▓реЗ рдзрдмреНрдмреЗ)</option>
                        <option value="rust_pustules">Rust Pustules (рдХрд┐рдЯреНрдЯ рдХреЗ рджрд╛рдиреЗ)</option>
                      </select>
                    </div>
                    <div className="form-group">
                      <label>Leaf Texture | рдкрддреНрддреА рдХреА рдмрдирд╛рд╡рдЯ</label>
                      <select name="leaf_texture" value={formData.leaf_texture} onChange={handleInputChange}>
                        <option value="normal">Normal (рд╕рд╛рдорд╛рдиреНрдп)</option>
                        <option value="wilted">Wilted (рдореБрд░рдЭрд╛рдпрд╛)</option>
                        <option value="curled">Curled (рдореБрдбрд╝рд╛ рд╣реБрдЖ)</option>
                        <option value="brittle">Brittle (рднрдВрдЧреБрд░)</option>
                        <option value="thick">Thick (рдореЛрдЯрд╛)</option>
                        <option value="thin">Thin (рдкрддрд▓рд╛)</option>
                      </select>
                    </div>
                  </div>
                  <div className="form-row">
                    <div className="form-group">
                      <label>Leaf Shape | рдкрддреНрддреА рдХрд╛ рдЖрдХрд╛рд░</label>
                      <select name="leaf_shape" value={formData.leaf_shape} onChange={handleInputChange}>
                        <option value="normal">Normal (рд╕рд╛рдорд╛рдиреНрдп)</option>
                        <option value="distorted">Distorted (рд╡рд┐рдХреГрдд)</option>
                        <option value="stunted">Stunted (рдмреМрдирд╛)</option>
                        <option value="enlarged">Enlarged (рдмрдбрд╝рд╛)</option>
                      </select>
                    </div>
                    <div className="form-group">
                      <label>Leaf Edges | рдкрддреНрддреА рдХреЗ рдХрд┐рдирд╛рд░реЗ</label>
                      <select name="leaf_edges" value={formData.leaf_edges} onChange={handleInputChange}>
                        <option value="normal">Normal (рд╕рд╛рдорд╛рдиреНрдп)</option>
                        <option value="brown_edges">Brown Edges (рднреВрд░реЗ рдХрд┐рдирд╛рд░реЗ)</option>
                        <option value="burnt_edges">Burnt Edges (рдЬрд▓реЗ рдХрд┐рдирд╛рд░реЗ)</option>
                        <option value="torn_edges">Torn Edges (рдлрдЯреЗ рдХрд┐рдирд╛рд░реЗ)</option>
                      </select>
                    </div>
                  </div>
                </div>

                {/* Stem and Root Symptoms */}
                <div className="form-section">
                  <h3>ЁЯМ╛ Stem & Root Symptoms | рддрдирд╛ рдФрд░ рдЬрдбрд╝ рдХреЗ рд▓рдХреНрд╖рдг</h3>
                  <div className="form-row">
                    <div className="form-group">
                      <label>Stem Condition | рддрдиреЗ рдХреА рд╕реНрдерд┐рддрд┐</label>
                      <select name="stem_condition" value={formData.stem_condition} onChange={handleInputChange}>
                        <option value="healthy">Healthy (рд╕реНрд╡рд╕реНрде)</option>
                        <option value="lesions">Lesions (рдШрд╛рд╡)</option>
                        <option value="cankers">Cankers (рдХреИрдВрдХрд░)</option>
                        <option value="soft_rot">Soft Rot (рдирд░рдо рд╕рдбрд╝рди)</option>
                        <option value="discoloration">Discoloration (рд░рдВрдЧ рдмрджрд▓рд╛рд╡)</option>
                        <option value="cracking">Cracking (рджрд░рд╛рд░реЗрдВ)</option>
                        <option value="girdling">Girdling (рдШреЗрд░рдирд╛)</option>
                      </select>
                    </div>
                    <div className="form-group">
                      <label>Stem Color | рддрдиреЗ рдХрд╛ рд░рдВрдЧ</label>
                      <select name="stem_color" value={formData.stem_color} onChange={handleInputChange}>
                        <option value="normal_green">Normal Green (рд╕рд╛рдорд╛рдиреНрдп рд╣рд░рд╛)</option>
                        <option value="brown">Brown (рднреВрд░рд╛)</option>
                        <option value="black">Black (рдХрд╛рд▓рд╛)</option>
                        <option value="red_brown">Red-Brown (рд▓рд╛рд▓ рднреВрд░рд╛)</option>
                        <option value="yellow">Yellow (рдкреАрд▓рд╛)</option>
                      </select>
                    </div>
                  </div>
                  <div className="form-row">
                    <div className="form-group">
                      <label>Root Condition | рдЬрдбрд╝ рдХреА рд╕реНрдерд┐рддрд┐</label>
                      <select name="root_condition" value={formData.root_condition} onChange={handleInputChange}>
                        <option value="healthy">Healthy (рд╕реНрд╡рд╕реНрде)</option>
                        <option value="root_rot">Root Rot (рдЬрдбрд╝ рд╕рдбрд╝рди)</option>
                        <option value="poor_development">Poor Development (рдХрдо рд╡рд┐рдХрд╛рд╕)</option>
                        <option value="discolored">Discolored (рд░рдВрдЧ рдмрджрд▓рд╛)</option>
                        <option value="stunted">Stunted (рдмреМрдиреА)</option>
                      </select>
                    </div>
                    <div className="form-group">
                      <label>Root Color | рдЬрдбрд╝ рдХрд╛ рд░рдВрдЧ</label>
                      <select name="root_color" value={formData.root_color} onChange={handleInputChange}>
                        <option value="white_cream">White/Cream (рд╕рдлреЗрдж/рдХреНрд░реАрдо)</option>
                        <option value="brown">Brown (рднреВрд░рд╛)</option>
                        <option value="black">Black (рдХрд╛рд▓рд╛)</option>
                        <option value="reddish">Reddish (рд▓рд╛рд▓рд┐рдорд╛ рд▓рд┐рдП)</option>
                        <option value="yellow">Yellow (рдкреАрд▓рд╛)</option>
                      </select>
                    </div>
                  </div>
                </div>

                {/* Environmental Conditions */}
                <div className="form-section">
                  <h3>ЁЯМбя╕П Environmental Conditions | рдкрд░реНрдпрд╛рд╡рд░рдгреАрдп рд╕реНрдерд┐рддрд┐рдпрд╛рдВ</h3>
                  <div className="form-row">
                    <div className="form-group">
                      <label>Temperature (┬░C) | рддрд╛рдкрдорд╛рди</label>
                      <input
                        type="range"
                        name="temperature"
                        min="10"
                        max="45"
                        value={formData.temperature}
                        onChange={handleInputChange}
                        className="slider"
                      />
                      <span className="slider-value">{formData.temperature}┬░C</span>
                    </div>
                    <div className="form-group">
                      <label>Humidity (%) | рдЖрд░реНрджреНрд░рддрд╛</label>
                      <input
                        type="range"
                        name="humidity"
                        min="30"
                        max="100"
                        value={formData.humidity}
                        onChange={handleInputChange}
                        className="slider"
                      />
                      <span className="slider-value">{formData.humidity}%</span>
                    </div>
                  </div>
                  <div className="form-row">
                    <div className="form-group">
                      <label>Recent Rainfall | рд╣рд╛рд▓ рдХреА рдмрд╛рд░рд┐рд╢</label>
                      <select name="rainfall" value={formData.rainfall} onChange={handleInputChange}>
                        <option value="none">None (рдХреЛрдИ рдирд╣реАрдВ)</option>
                        <option value="light">Light (рд╣рд▓реНрдХреА)</option>
                        <option value="moderate">Moderate (рдордзреНрдпрдо)</option>
                        <option value="heavy">Heavy (рднрд╛рд░реА)</option>
                        <option value="excessive">Excessive (рдЕрддреНрдпрдзрд┐рдХ)</option>
                      </select>
                    </div>
                    <div className="form-group">
                      <label>Field Drainage | рдЦреЗрдд рдХреА рдЬрд▓ рдирд┐рдХрд╛рд╕реА</label>
                      <select name="field_drainage" value={formData.field_drainage} onChange={handleInputChange}>
                        <option value="excellent">Excellent (рдЙрддреНрдХреГрд╖реНрдЯ)</option>
                        <option value="good">Good (рдЕрдЪреНрдЫреА)</option>
                        <option value="moderate">Moderate (рдордзреНрдпрдо)</option>
                        <option value="poor">Poor (рдЦрд░рд╛рдм)</option>
                      </select>
                    </div>
                  </div>
                </div>

                {/* Mineral Status */}
                <div className="form-section">
                  <h3>ЁЯзк Mineral Status | рдЦрдирд┐рдЬ рд╕реНрдерд┐рддрд┐</h3>
                  <div className="mineral-grid">
                    <div className="form-group">
                      <label>Nitrogen (N) | рдирд╛рдЗрдЯреНрд░реЛрдЬрди</label>
                      <select name="nitrogen_status" value={formData.nitrogen_status} onChange={handleInputChange}>
                        <option value="deficient">Deficient (рдХрдореА)</option>
                        <option value="adequate">Adequate (рдкрд░реНрдпрд╛рдкреНрдд)</option>
                        <option value="excess">Excess (рдЕрдзрд┐рдХ)</option>
                      </select>
                    </div>
                    <div className="form-group">
                      <label>Phosphorus (P) | рдлреЙрд╕реНрдлреЛрд░рд╕</label>
                      <select name="phosphorus_status" value={formData.phosphorus_status} onChange={handleInputChange}>
                        <option value="deficient">Deficient (рдХрдореА)</option>
                        <option value="adequate">Adequate (рдкрд░реНрдпрд╛рдкреНрдд)</option>
                        <option value="excess">Excess (рдЕрдзрд┐рдХ)</option>
                      </select>
                    </div>
                    <div className="form-group">
                      <label>Potassium (K) | рдкреЛрдЯреЗрд╢рд┐рдпрдо</label>
                      <select name="potassium_status" value={formData.potassium_status} onChange={handleInputChange}>
                        <option value="deficient">Deficient (рдХрдореА)</option>
                        <option value="adequate">Adequate (рдкрд░реНрдпрд╛рдкреНрдд)</option>
                        <option value="excess">Excess (рдЕрдзрд┐рдХ)</option>
                      </select>
                    </div>
                    <div className="form-group">
                      <label>Calcium (Ca) | рдХреИрд▓реНрд╢рд┐рдпрдо</label>
                      <select name="calcium_status" value={formData.calcium_status} onChange={handleInputChange}>
                        <option value="deficient">Deficient (рдХрдореА)</option>
                        <option value="adequate">Adequate (рдкрд░реНрдпрд╛рдкреНрдд)</option>
                        <option value="excess">Excess (рдЕрдзрд┐рдХ)</option>
                      </select>
                    </div>
                    <div className="form-group">
                      <label>Magnesium (Mg) | рдореИрдЧреНрдиреАрд╢рд┐рдпрдо</label>
                      <select name="magnesium_status" value={formData.magnesium_status} onChange={handleInputChange}>
                        <option value="deficient">Deficient (рдХрдореА)</option>
                        <option value="adequate">Adequate (рдкрд░реНрдпрд╛рдкреНрдд)</option>
                        <option value="excess">Excess (рдЕрдзрд┐рдХ)</option>
                      </select>
                    </div>
                    <div className="form-group">
                      <label>Iron (Fe) | рдЖрдпрд░рди</label>
                      <select name="iron_status" value={formData.iron_status} onChange={handleInputChange}>
                        <option value="deficient">Deficient (рдХрдореА)</option>
                        <option value="adequate">Adequate (рдкрд░реНрдпрд╛рдкреНрдд)</option>
                        <option value="excess">Excess (рдЕрдзрд┐рдХ)</option>
                      </select>
                    </div>
                  </div>
                </div>
              </div>

              {/* Form Actions */}
              <div className="form-actions">
                <button type="button" className="btn btn-secondary" onClick={resetForm}>
                  ЁЯФД Reset Form
                </button>
                <button
                  type="submit"
                  className="btn btn-primary analyze-btn"
                  disabled={isAnalyzing}
                >
                  {isAnalyzing ? (
                    <>
                      <div className="spinner"></div>
                      Analyzing... | рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╣реЛ рд░рд╣рд╛ рд╣реИ...
                    </>
                  ) : (
                    <>ЁЯФм Predict Disease | рд░реЛрдЧ рдХреА рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рдХрд░реЗрдВ</>
                  )}
                </button>
              </div>
            </form>
          </div>
        )}

        {/* Results Tab */}
        {activeTab === 'results' && (
          <div className="results-section">
            <div className="results-header">
              <h2>ЁЯОп Disease Predictions | рд░реЛрдЧ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди</h2>
              <p>Crop: <strong>{formData.crop}</strong> | State: <strong>{formData.state}</strong></p>
            </div>

            {predictions.length > 0 ? (
              <div className="predictions-grid">
                {predictions.map((prediction, index) => (
                  <div
                    key={prediction.diseaseKey}
                    className={`prediction-card ${prediction.riskLevel.toLowerCase()}-risk`}
                  >
                    <div className="prediction-header">
                      <div className="prediction-rank">#{index + 1}</div>
                      <div className="prediction-info">
                        <h3>{prediction.diseaseData.disease_name}</h3>
                        <div className="disease-meta">
                          <span className={`disease-type ${prediction.diseaseData.type.toLowerCase()}`}>
                            {prediction.diseaseData.type}
                          </span>
                          <span className={`severity-badge ${prediction.diseaseData.severity.toLowerCase()}`}>
                            {prediction.diseaseData.severity} Severity
                          </span>
                        </div>
                      </div>
                      <div className="probability-display">
                        <div className="probability-circle">
                          <span className="probability-value">{Math.round(prediction.probability)}%</span>
                        </div>
                        <div className={`risk-level ${prediction.riskLevel.toLowerCase()}`}>
                          {prediction.riskLevel} Risk
                        </div>
                      </div>
                    </div>

                    <div className="prediction-body">
                      <p className="disease-description">{prediction.diseaseData.description}</p>

                      <div className="symptoms-preview">
                        <h4>ЁЯФН Key Symptoms:</h4>
                        <ul>
                          {prediction.diseaseData.symptoms.leaf.slice(0, 2).map((symptom, idx) => (
                            <li key={idx}>ЁЯНГ {symptom}</li>
                          ))}
                          {prediction.diseaseData.symptoms.stem.slice(0, 1).map((symptom, idx) => (
                            <li key={idx}>ЁЯМ╛ {symptom}</li>
                          ))}
                        </ul>
                      </div>

                      <button
                        className="toggle-details-btn"
                        onClick={() => toggleDetails(prediction.diseaseKey)}
                      >
                        {showDetails[prediction.diseaseKey] ? 'тЦ╝ Hide Details' : 'тЦ╢ View Details'}
                      </button>

                      {showDetails[prediction.diseaseKey] && (
                        <div className="disease-details">
                          <div className="detail-section">
                            <h4>ЁЯНГ Leaf Symptoms:</h4>
                            <ul>
                              {prediction.diseaseData.symptoms.leaf.map((symptom, idx) => (
                                <li key={idx}>{symptom}</li>
                              ))}
                            </ul>
                          </div>

                          <div className="detail-section">
                            <h4>ЁЯМ╛ Stem/Root Symptoms:</h4>
                            <ul>
                              {prediction.diseaseData.symptoms.stem.map((symptom, idx) => (
                                <li key={idx}>{symptom}</li>
                              ))}
                              {prediction.diseaseData.symptoms.root.map((symptom, idx) => (
                                <li key={idx}>{symptom}</li>
                              ))}
                            </ul>
                          </div>

                          <div className="detail-section">
                            <h4>ЁЯзк Associated Mineral Issues:</h4>
                            <ul>
                              {prediction.diseaseData.mineral_deficiency.primary.map((def, idx) => (
                                <li key={idx} className="primary-deficiency">{def}</li>
                              ))}
                              {prediction.diseaseData.mineral_deficiency.secondary?.map((def, idx) => (
                                <li key={idx} className="secondary-deficiency">{def}</li>
                              ))}
                            </ul>
                          </div>

                          <div className="detail-section">
                            <h4>ЁЯМбя╕П Favorable Conditions:</h4>
                            <p>Temperature: {prediction.diseaseData.environmental_factors.temperature?.[0]}┬░C - {prediction.diseaseData.environmental_factors.temperature?.[1]}┬░C</p>
                            <p>Humidity: {prediction.diseaseData.environmental_factors.humidity?.[0]}% - {prediction.diseaseData.environmental_factors.humidity?.[1]}%</p>
                            <ul>
                              {prediction.diseaseData.environmental_factors.conditions.map((condition, idx) => (
                                <li key={idx}>{condition}</li>
                              ))}
                            </ul>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="no-predictions">
                <div className="no-predictions-icon">ЁЯФм</div>
                <h3>No Disease Predictions Available</h3>
                <p>Please fill in the symptom information and run the analysis.</p>
              </div>
            )}
          </div>
        )}

        {/* Treatment Tab */}
        {activeTab === 'treatment' && predictions.length > 0 && (
          <div className="treatment-section">
            <div className="treatment-header">
              <h2>ЁЯТК Treatment & Management Guide</h2>
              <p>рдЙрдкрдЪрд╛рд░ рдФрд░ рдкреНрд░рдмрдВрдзрди рдЧрд╛рдЗрдб</p>
            </div>

            <div className="treatment-cards">
              {predictions.slice(0, 3).map((prediction, index) => (
                <div key={prediction.diseaseKey} className="treatment-card">
                  <div className="treatment-header-card">
                    <h3>{prediction.diseaseData.disease_name}</h3>
                    <span className={`probability-badge ${prediction.riskLevel.toLowerCase()}`}>
                      {Math.round(prediction.probability)}% Probability
                    </span>
                  </div>

                  <div className="treatment-sections">
                    <div className="treatment-section-item">
                      <h4>ЁЯзк Chemical Treatment</h4>
                      <ul>
                        {prediction.diseaseData.treatment.chemical.map((treatment, idx) => (
                          <li key={idx}>{treatment}</li>
                        ))}
                      </ul>
                    </div>

                    <div className="treatment-section-item">
                      <h4>ЁЯМ┐ Organic Treatment</h4>
                      <ul>
                        {prediction.diseaseData.treatment.organic.map((treatment, idx) => (
                          <li key={idx}>{treatment}</li>
                        ))}
                      </ul>
                    </div>

                    <div className="treatment-section-item">
                      <h4>ЁЯЪЬ Management Practices</h4>
                      <ul>
                        {prediction.diseaseData.treatment.management.map((practice, idx) => (
                          <li key={idx}>{practice}</li>
                        ))}
                      </ul>
                    </div>

                    <div className="prevention-section">
                      <h4>ЁЯЫбя╕П Prevention</h4>
                      <p>{prediction.diseaseData.prevention}</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default DiseasePredictor;